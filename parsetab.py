
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOLEAN BREAK CASE CIN COMMA COUT DIVISION DO DOTCOMMA DOUBLE DOUBLEDOT EQUALS FI GREAT GREATEQUAL IDENTIFIER IF INTEGER KEYLEFT KEYRIGHT LESS LESSEQUAL MAIN MINUS MINUSDOUBLE MODULE MULTIPLECOMMENT NOTEQUAL NUMBER OR OTHERWISE PARLEFT PARRIGHT POW REALNUMBER RETURN SINGLECOMMENT SQRLEFT SQRRIGHT SUM SUMDOUBLE SWITCH TIMES WHILEprogram : mainmain : MAIN KEYLEFT declarations KEYRIGHTdeclarations : declarations declaration\n                    | declarationdeclaration : declaration_variable\n                   | statementdeclaration_variable : type variable DOTCOMMAvariable : variable COMMA IDENTIFIER\n                | IDENTIFIERtype : BOOLEAN\n            | INTEGER\n            | DOUBLEstatements : statements statement\n                  | statementstatement : compound_statement\n                 | cin_statement\n                 | cout_statement\n                 | assign_statement\n                 | select_statement\n                 | iteration_statement\n                 | switch_statement\n                 | doublefactscompound_statement : KEYLEFT statements KEYRIGHTassign_statement : IDENTIFIER ASSIGN expression DOTCOMMAselect_statement : IF PARLEFT expression PARRIGHT compound_statement\n                        | IF PARLEFT expression PARRIGHT compound_statement OTHERWISE compound_statementiteration_statement : WHILE PARLEFT expression PARRIGHT compound_statement\n                           | DO compound_statement WHILE PARLEFT expression PARRIGHT DOTCOMMAswitch_statement : SWITCH PARLEFT expression PARRIGHT KEYLEFT case_list KEYRIGHTcase_list : case_list case_statement \n                 | case_statementcase_statement : CASE facts DOUBLEDOT statements BREAK DOTCOMMAcin_statement : CIN IDENTIFIER DOTCOMMAcout_statement : COUT expression DOTCOMMAexpression : simple_expression relation_operator simple_expression\n                  | simple_expressionrelation_operator : EQUALS\n                         | NOTEQUAL\n                         | LESS\n                         | LESSEQUAL\n                         | GREAT\n                         | GREATEQUAL\n                         | AND\n                         | ORsimple_expression : simple_expression sum_operator term\n                         | termsum_operator : SUM\n                    | MINUSterm : term mult_operator factor \n            | factormult_operator : TIMES\n                     | DIVISION\n                     | MODULEfactor : factor pot_operator component\n              | componentpot_operator : POWdoublefacts : IDENTIFIER SUMDOUBLE DOTCOMMA\n                   | IDENTIFIER MINUSDOUBLE DOTCOMMAcomponent : PARLEFT expression PARRIGHT\n                 | IDENTIFIER\n                 | facts\n                 | doublefactsfacts : NUMBER\n             | REALNUMBER\n             | BOOLempty : '
    
_lr_action_items = {'MAIN':([0,],[3,]),'$end':([1,2,31,],[0,-1,-2,]),'KEYLEFT':([3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,27,29,30,32,55,56,57,59,61,62,63,88,94,95,97,98,99,102,107,108,109,112,113,],[4,5,5,5,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,5,5,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,5,5,101,-25,-27,5,-26,-28,-29,5,5,]),'BOOLEAN':([4,6,7,8,9,11,12,13,14,15,16,17,18,32,55,57,59,61,62,63,88,98,99,107,108,109,],[19,19,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,-3,-23,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,]),'INTEGER':([4,6,7,8,9,11,12,13,14,15,16,17,18,32,55,57,59,61,62,63,88,98,99,107,108,109,],[20,20,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,-3,-23,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,]),'DOUBLE':([4,6,7,8,9,11,12,13,14,15,16,17,18,32,55,57,59,61,62,63,88,98,99,107,108,109,],[21,21,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,-3,-23,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,]),'CIN':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[22,22,22,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,22,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,22,22,]),'COUT':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[24,24,24,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,24,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,24,24,]),'IDENTIFIER':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,29,30,32,36,44,51,52,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,88,96,98,99,107,108,109,112,113,],[23,23,23,-4,-5,-6,34,-15,-16,-17,-18,-19,-20,-21,-22,-10,-11,-12,35,45,23,-14,-3,45,45,45,45,45,-23,-13,-7,87,-33,-57,-58,-34,45,45,-37,-38,-39,-40,-41,-42,-43,-44,-47,-48,45,-51,-52,-53,45,-56,-24,45,-25,-27,-26,-28,-29,23,23,]),'IF':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[25,25,25,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,25,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,25,25,]),'WHILE':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,53,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[26,26,26,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,26,-14,-3,85,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,26,26,]),'DO':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[27,27,27,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,27,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,27,27,]),'SWITCH':([4,5,6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,107,108,109,112,113,],[28,28,28,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,28,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,28,28,]),'KEYRIGHT':([6,7,8,9,11,12,13,14,15,16,17,18,29,30,32,55,56,57,59,61,62,63,88,98,99,104,105,107,108,109,110,115,],[31,-4,-5,-6,-15,-16,-17,-18,-19,-20,-21,-22,55,-14,-3,-23,-13,-7,-33,-57,-58,-34,-24,-25,-27,109,-31,-26,-28,-29,-30,-32,]),'BREAK':([11,12,13,14,15,16,17,18,30,55,56,59,61,62,63,88,98,99,107,108,109,113,],[-15,-16,-17,-18,-19,-20,-21,-22,-14,-23,-13,-33,-57,-58,-34,-24,-25,-27,-26,-28,-29,114,]),'ASSIGN':([23,],[36,]),'SUMDOUBLE':([23,45,],[37,37,]),'MINUSDOUBLE':([23,45,],[38,38,]),'PARLEFT':([24,25,26,28,36,44,51,52,54,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,96,],[44,51,52,54,44,44,44,44,44,44,44,-37,-38,-39,-40,-41,-42,-43,-44,-47,-48,44,-51,-52,-53,44,-56,96,44,]),'NUMBER':([24,36,44,51,52,54,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,96,106,],[48,48,48,48,48,48,48,48,-37,-38,-39,-40,-41,-42,-43,-44,-47,-48,48,-51,-52,-53,48,-56,48,48,]),'REALNUMBER':([24,36,44,51,52,54,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,96,106,],[49,49,49,49,49,49,49,49,-37,-38,-39,-40,-41,-42,-43,-44,-47,-48,49,-51,-52,-53,49,-56,49,49,]),'BOOL':([24,36,44,51,52,54,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,96,106,],[50,50,50,50,50,50,50,50,-37,-38,-39,-40,-41,-42,-43,-44,-47,-48,50,-51,-52,-53,50,-56,50,50,]),'DOTCOMMA':([33,34,35,37,38,39,40,41,42,43,45,46,47,48,49,50,60,61,62,87,89,90,91,92,93,103,114,],[57,-9,59,61,62,63,-36,-46,-50,-55,-60,-61,-62,-63,-64,-65,88,-57,-58,-8,-35,-45,-49,-54,-59,108,115,]),'COMMA':([33,34,87,],[58,-9,-8,]),'PARRIGHT':([40,41,42,43,45,46,47,48,49,50,61,62,82,83,84,86,89,90,91,92,93,100,],[-36,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,93,94,95,97,-35,-45,-49,-54,-59,103,]),'EQUALS':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[66,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'NOTEQUAL':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[67,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'LESS':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[68,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'LESSEQUAL':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[69,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'GREAT':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[70,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'GREATEQUAL':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[71,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'AND':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[72,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'OR':([40,41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[73,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,-45,-49,-54,-59,]),'SUM':([40,41,42,43,45,46,47,48,49,50,61,62,89,90,91,92,93,],[74,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,74,-45,-49,-54,-59,]),'MINUS':([40,41,42,43,45,46,47,48,49,50,61,62,89,90,91,92,93,],[75,-46,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,75,-45,-49,-54,-59,]),'TIMES':([41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[77,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,77,-49,-54,-59,]),'DIVISION':([41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[78,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,78,-49,-54,-59,]),'MODULE':([41,42,43,45,46,47,48,49,50,61,62,90,91,92,93,],[79,-50,-55,-60,-61,-62,-63,-64,-65,-57,-58,79,-49,-54,-59,]),'POW':([42,43,45,46,47,48,49,50,61,62,91,92,93,],[81,-55,-60,-61,-62,-63,-64,-65,-57,-58,81,-54,-59,]),'DOUBLEDOT':([48,49,50,111,],[-63,-64,-65,112,]),'OTHERWISE':([55,98,],[-23,102,]),'CASE':([101,104,105,110,115,],[106,106,-31,-30,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main':([0,],[2,]),'declarations':([4,],[6,]),'declaration':([4,6,],[7,32,]),'declaration_variable':([4,6,],[8,8,]),'statement':([4,5,6,29,112,113,],[9,30,9,56,30,56,]),'type':([4,6,],[10,10,]),'compound_statement':([4,5,6,27,29,94,95,102,112,113,],[11,11,11,53,11,98,99,107,11,11,]),'cin_statement':([4,5,6,29,112,113,],[12,12,12,12,12,12,]),'cout_statement':([4,5,6,29,112,113,],[13,13,13,13,13,13,]),'assign_statement':([4,5,6,29,112,113,],[14,14,14,14,14,14,]),'select_statement':([4,5,6,29,112,113,],[15,15,15,15,15,15,]),'iteration_statement':([4,5,6,29,112,113,],[16,16,16,16,16,16,]),'switch_statement':([4,5,6,29,112,113,],[17,17,17,17,17,17,]),'doublefacts':([4,5,6,24,29,36,44,51,52,54,64,65,76,80,96,112,113,],[18,18,18,47,18,47,47,47,47,47,47,47,47,47,47,18,18,]),'statements':([5,112,],[29,113,]),'variable':([10,],[33,]),'expression':([24,36,44,51,52,54,96,],[39,60,82,83,84,86,100,]),'simple_expression':([24,36,44,51,52,54,64,96,],[40,40,40,40,40,40,89,40,]),'term':([24,36,44,51,52,54,64,65,96,],[41,41,41,41,41,41,41,90,41,]),'factor':([24,36,44,51,52,54,64,65,76,96,],[42,42,42,42,42,42,42,42,91,42,]),'component':([24,36,44,51,52,54,64,65,76,80,96,],[43,43,43,43,43,43,43,43,43,92,43,]),'facts':([24,36,44,51,52,54,64,65,76,80,96,106,],[46,46,46,46,46,46,46,46,46,46,46,111,]),'relation_operator':([40,],[64,]),'sum_operator':([40,89,],[65,65,]),'mult_operator':([41,90,],[76,76,]),'pot_operator':([42,91,],[80,80,]),'case_list':([101,],[104,]),'case_statement':([101,104,],[105,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main','program',1,'p_program','analsint.py',203),
  ('main -> MAIN KEYLEFT declarations KEYRIGHT','main',4,'p_main','analsint.py',207),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','analsint.py',211),
  ('declarations -> declaration','declarations',1,'p_declarations','analsint.py',212),
  ('declaration -> declaration_variable','declaration',1,'p_declaration','analsint.py',219),
  ('declaration -> statement','declaration',1,'p_declaration','analsint.py',220),
  ('declaration_variable -> type variable DOTCOMMA','declaration_variable',3,'p_declaration_variable','analsint.py',224),
  ('variable -> variable COMMA IDENTIFIER','variable',3,'p_variable','analsint.py',228),
  ('variable -> IDENTIFIER','variable',1,'p_variable','analsint.py',229),
  ('type -> BOOLEAN','type',1,'p_type','analsint.py',236),
  ('type -> INTEGER','type',1,'p_type','analsint.py',237),
  ('type -> DOUBLE','type',1,'p_type','analsint.py',238),
  ('statements -> statements statement','statements',2,'p_statements','analsint.py',242),
  ('statements -> statement','statements',1,'p_statements','analsint.py',243),
  ('statement -> compound_statement','statement',1,'p_statement','analsint.py',250),
  ('statement -> cin_statement','statement',1,'p_statement','analsint.py',251),
  ('statement -> cout_statement','statement',1,'p_statement','analsint.py',252),
  ('statement -> assign_statement','statement',1,'p_statement','analsint.py',253),
  ('statement -> select_statement','statement',1,'p_statement','analsint.py',254),
  ('statement -> iteration_statement','statement',1,'p_statement','analsint.py',255),
  ('statement -> switch_statement','statement',1,'p_statement','analsint.py',256),
  ('statement -> doublefacts','statement',1,'p_statement','analsint.py',257),
  ('compound_statement -> KEYLEFT statements KEYRIGHT','compound_statement',3,'p_compound_statement','analsint.py',261),
  ('assign_statement -> IDENTIFIER ASSIGN expression DOTCOMMA','assign_statement',4,'p_assign_statement','analsint.py',265),
  ('select_statement -> IF PARLEFT expression PARRIGHT compound_statement','select_statement',5,'p_select_statement','analsint.py',269),
  ('select_statement -> IF PARLEFT expression PARRIGHT compound_statement OTHERWISE compound_statement','select_statement',7,'p_select_statement','analsint.py',270),
  ('iteration_statement -> WHILE PARLEFT expression PARRIGHT compound_statement','iteration_statement',5,'p_iteration_statement','analsint.py',277),
  ('iteration_statement -> DO compound_statement WHILE PARLEFT expression PARRIGHT DOTCOMMA','iteration_statement',7,'p_iteration_statement','analsint.py',278),
  ('switch_statement -> SWITCH PARLEFT expression PARRIGHT KEYLEFT case_list KEYRIGHT','switch_statement',7,'p_switch_statement','analsint.py',285),
  ('case_list -> case_list case_statement','case_list',2,'p_case_list','analsint.py',289),
  ('case_list -> case_statement','case_list',1,'p_case_list','analsint.py',290),
  ('case_statement -> CASE facts DOUBLEDOT statements BREAK DOTCOMMA','case_statement',6,'p_case_statement','analsint.py',297),
  ('cin_statement -> CIN IDENTIFIER DOTCOMMA','cin_statement',3,'p_cin_statement','analsint.py',301),
  ('cout_statement -> COUT expression DOTCOMMA','cout_statement',3,'p_cout_statement','analsint.py',305),
  ('expression -> simple_expression relation_operator simple_expression','expression',3,'p_expression','analsint.py',309),
  ('expression -> simple_expression','expression',1,'p_expression','analsint.py',310),
  ('relation_operator -> EQUALS','relation_operator',1,'p_relation_operator','analsint.py',317),
  ('relation_operator -> NOTEQUAL','relation_operator',1,'p_relation_operator','analsint.py',318),
  ('relation_operator -> LESS','relation_operator',1,'p_relation_operator','analsint.py',319),
  ('relation_operator -> LESSEQUAL','relation_operator',1,'p_relation_operator','analsint.py',320),
  ('relation_operator -> GREAT','relation_operator',1,'p_relation_operator','analsint.py',321),
  ('relation_operator -> GREATEQUAL','relation_operator',1,'p_relation_operator','analsint.py',322),
  ('relation_operator -> AND','relation_operator',1,'p_relation_operator','analsint.py',323),
  ('relation_operator -> OR','relation_operator',1,'p_relation_operator','analsint.py',324),
  ('simple_expression -> simple_expression sum_operator term','simple_expression',3,'p_simple_expression','analsint.py',328),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','analsint.py',329),
  ('sum_operator -> SUM','sum_operator',1,'p_sum_operator','analsint.py',336),
  ('sum_operator -> MINUS','sum_operator',1,'p_sum_operator','analsint.py',337),
  ('term -> term mult_operator factor','term',3,'p_term','analsint.py',341),
  ('term -> factor','term',1,'p_term','analsint.py',342),
  ('mult_operator -> TIMES','mult_operator',1,'p_mult_operator','analsint.py',349),
  ('mult_operator -> DIVISION','mult_operator',1,'p_mult_operator','analsint.py',350),
  ('mult_operator -> MODULE','mult_operator',1,'p_mult_operator','analsint.py',351),
  ('factor -> factor pot_operator component','factor',3,'p_factor','analsint.py',355),
  ('factor -> component','factor',1,'p_factor','analsint.py',356),
  ('pot_operator -> POW','pot_operator',1,'p_pot_operator','analsint.py',363),
  ('doublefacts -> IDENTIFIER SUMDOUBLE DOTCOMMA','doublefacts',3,'p_doublefacts','analsint.py',368),
  ('doublefacts -> IDENTIFIER MINUSDOUBLE DOTCOMMA','doublefacts',3,'p_doublefacts','analsint.py',369),
  ('component -> PARLEFT expression PARRIGHT','component',3,'p_component','analsint.py',377),
  ('component -> IDENTIFIER','component',1,'p_component','analsint.py',378),
  ('component -> facts','component',1,'p_component','analsint.py',379),
  ('component -> doublefacts','component',1,'p_component','analsint.py',380),
  ('facts -> NUMBER','facts',1,'p_facts','analsint.py',387),
  ('facts -> REALNUMBER','facts',1,'p_facts','analsint.py',388),
  ('facts -> BOOL','facts',1,'p_facts','analsint.py',389),
  ('empty -> <empty>','empty',0,'p_empty','analsint.py',393),
]
